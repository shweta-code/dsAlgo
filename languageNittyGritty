1. Initialize and define and declare array list together
ArrayList<String> gfg = new ArrayList<String>() {
            {
                add("Geeks");
                add("for");
                add("Geeks");
            }
        };

2. How to intialize stack?
    Stack<Integer> <Integer> = new Stack<Integer>()
    (https://www.geeksforgeeks.org/stack-class-in-java/)

3. There is only call by value in java, not call by reference -
[Call by Value and Call by Reference in java - javatpoint](https://www.javatpoint.com/call-by-value-and-call-by-reference-in-java)
See visited[] in graphs/DFS.java

4. This will print '0'.
ArrayList<ArrayList<Integer>> adj = new ArrayList<>(V);

        System.out.println(adj.size());

5. When you convert stack to array, toArray implementation pops out elements and put in
popped order.
topoSorted is stack.
Integer[] ans = new Integer[topoSorted.size()];
        // Revise - How to convert stack into an array?
        topoSorted.toArray(ans);

4. Revise - map.containsKey() , map.containsValue()

5. Revise - Equals and hascode method

6. x--;  if(x == 1) is quivalent to if(--x == 1)

7. PQ API -> pq.poll(), pq.peek(), pq.offer()

8. Collections.EMPTY_LIST is List of Objects not any object type. Neither can it be casted.

9. Optional<Room> maxCountRoom = Arrays.stream(rooms).max(Comparator.comparingInt(Room::getCount));
           // Applicable on object of type Optional
           return maxCountRoom.map(Room::getRoomNo).orElse(0);

10. Printing elements of a stream in java8
Stream<String> streamCountries = Stream.of("Germany", "England",
      "China", "Denmark", "Brazil");
    streamCountries.forEach(s->System.out.println(s));

    Arrays.stream(rooms).forEach(s -> System.out.println(s.roomNo +"-> "+ s.getCount()));

11. LinkedList<Pair<String, Integer>> msgQ
    Pair<String, Integer> head = msgQ.getFirst()
    msgQ.removeFirst()
    msgQ.remove(head.first)
    msgQ.addLast(<new Message>)

12./**
        * Compares two strings lexicographically.
        * The comparison is based on the Unicode value of each character in
        * the strings. The character sequence represented by this
        * {@code String} object is compared lexicographically to the
        * character sequence represented by the argument string. The result is
        * a negative integer if this {@code String} object
        * lexicographically precedes the argument string. The result is a
        * positive integer if this {@code String} object lexicographically
        * follows the argument string. The result is zero if the strings
        * are equal; {@code compareTo} returns {@code 0} exactly when
        * the {@link #equals(Object)} method would return {@code true}.
        * <p>
        * This is the definition of lexicographic ordering. If two strings are
        * different, then either they have different characters at some index
        * that is a valid index for both strings, or their lengths are different,
        * or both. If they have different characters at one or more index
        * positions, let <i>k</i> be the smallest such index; then the string
        * whose character at position <i>k</i> has the smaller value, as
        * determined by using the &lt; operator, lexicographically precedes the
        * other string. In this case, {@code compareTo} returns the
        * difference of the two character values at position {@code k} in
        * the two string -- that is, the value:
        * <blockquote><pre>
        * this.charAt(k)-anotherString.charAt(k)
        * </pre></blockquote>
        * If there is no index position at which they differ, then the shorter
        * string lexicographically precedes the longer string. In this case,
        * {@code compareTo} returns the difference of the lengths of the
        * strings -- that is, the value:
        * <blockquote><pre>
        * this.length()-anotherString.length()
        * </pre></blockquote>
        *
        * @param   anotherString   the {@code String} to be compared.
        * @return  the value {@code 0} if the argument string is equal to
        *          this string; a value less than {@code 0} if this string
        *          is lexicographically less than the string argument; and a
        *          value greater than {@code 0} if this string is
        *          lexicographically greater than the string argument.
        */
       public int compareTo(String anotherString) {

13. String -> compareToIgnoreCase

14. String ->  equals, equalsIgnorecase

15. Follow up -> What if the inputs contain unicode characters?
    How would you adapt your solution to such case?
    Answer
    Use a hash table instead of a fixed size counter.
    Imagine allocating a large size array to fit the entire range of unicode characters,
    which could go up to more than 1 million.
    A hash table is a more generic solution and could adapt to any range of characters.

16. TreeMap
    TreeMap<Integer, Integer> treeMap = new TreeMap<>();
            treeMap.put(1, 10);
            treeMap.put(10, 17);
            treeMap.subMap(2, 10).clear();
            treeMap.forEach((key, value) -> System.out.println("key " + key + "value " + value));
        Conclusion ->    .subMap is exclusive of 10.
                            It will not delete (10,17) wali entry. .subMap deletes all entries key1, key2-1.

17. Instantiate Array of List
     List<Integer>[] adjList = new List[n];
     // This is wrong -> List<Integer>[] adjList = new List<>[n];
     // then you can say adjList[i] = new ArrayList<>();

18. Pair<Integer, Integer> coords
    coords.getKey()
    coords.getValue()

19. For graph questions, where you go up, down, right, left
    you can use         int[] dirx = {0, 1, 0, -1};
                        int[] diry = {-1, 0, 1, 0};


20. private boolean isAnInteger(double pow) {
            return pow % 1 == 0;
        }

21. For arrays, array.length, for string, string.length(), for list, list.size()



